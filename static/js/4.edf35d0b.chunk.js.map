{"version":3,"sources":["modules/SolarSystem/Orientation/IAUModel.js"],"names":["OrientationIAUModel","config","_this","Object","D_Projects_github_com_urbain_ru_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_Projects_github_com_urbain_ru_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Projects_github_com_urbain_ru_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","rightAscension","declination","rotation","ICRFQuaternion","Quaternion","deg2rad","epoch","centuries","days","mul","setFromEuler","OrientationAbstract"],"mappings":"4LAGqBA,cAEjB,SAAAA,EAAYC,GAAQ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QACKI,eAAiBR,EAAO,GAC7BC,EAAKQ,YAAcT,EAAO,GAC1BC,EAAKS,SAAWV,EAAO,GAEvBC,EAAKU,eAAiB,IAAIC,IAAW,EAAE,EAAG,EAAG,GAAIC,YAAQ,OANzCZ,oFASCa,GACjB,IAAMC,EAAYD,EAAQ,SACpBE,EAAOF,EAAQ,MAEfN,EAAiB,GAAKJ,KAAKI,eAAe,GAC5CO,EAAYX,KAAKI,eAAe,GAChCO,EAAYA,EAAYX,KAAKI,eAAe,GAC1CC,EAAc,IAAML,KAAKK,YAAY,GACvCM,EAAYX,KAAKK,YAAY,GAC7BM,EAAYA,EAAYX,KAAKK,YAAY,IACvCC,EAAWN,KAAKM,SAAS,GAC3BM,EAAOZ,KAAKM,SAAS,GACrBM,EAAOA,EAAOZ,KAAKM,SAAS,GAEhC,OAAON,KAAKO,eAAeM,KACtB,IAAIL,KACAM,aAAaL,YAAQL,GAAiBK,YAAQJ,GAAcI,YAAQH,GAAW,eA3B/CS","file":"static/js/4.edf35d0b.chunk.js","sourcesContent":["import OrientationAbstract from \"../../../core/Orientation/Abstract\";\r\nimport {deg2rad, Quaternion} from \"../../../core/algebra\";\r\n\r\nexport default class OrientationIAUModel extends OrientationAbstract\r\n{\r\n    constructor(config) {\r\n        super();\r\n        this.rightAscension = config[0];\r\n        this.declination = config[1];\r\n        this.rotation = config[2];\r\n\r\n        this.ICRFQuaternion = new Quaternion([-1, 0, 0], deg2rad(23.4)); // TODO needs refining\r\n    }\r\n\r\n    getQuaternionByEpoch(epoch) {\r\n        const centuries = epoch / 3155760000;\r\n        const days = epoch / 86400;\r\n\r\n        const rightAscension = 90 + this.rightAscension[0] +\r\n            centuries * this.rightAscension[1] +\r\n            centuries * centuries * this.rightAscension[2];\r\n        const declination = 90 - (this.declination[0] +\r\n            centuries * this.declination[1] +\r\n            centuries * centuries * this.declination[2]);\r\n        const rotation = this.rotation[0] +\r\n            days * this.rotation[1] +\r\n            days * days * this.rotation[2];\r\n\r\n        return this.ICRFQuaternion.mul(\r\n            (new Quaternion())\r\n                .setFromEuler(deg2rad(rightAscension), deg2rad(declination), deg2rad(rotation), 'ZXZ')\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}